package com.jmamoon;

import com.jmamoon.socialhousingcreditsystem.entity.*;
import com.jmamoon.socialhousingcreditsystem.model.*;
import com.jmamoon.socialhousingcreditsystem.constants.Constants;

rule "person whose age is less than legal adult age"
    salience 200
    when
        creditRequest : CreditRequest();
        engineParameters: EngineParameters();

        personAgeMin: Double () from engineParameters.getParameter(Constants.PERSON_AGE_MIN);

        person : Person ( age < personAgeMin ) from creditRequest.getPerson();

    then
        creditRequest.addIssue(Constants.PERSON_YOUNG);
end

rule "person whose age is more than maximum age"
    salience 200
    when
        creditRequest : CreditRequest();
        engineParameters: EngineParameters();

        personAgeMax: Double () from engineParameters.getParameter(Constants.PERSON_AGE_MAX);

        person : Person ( age > personAgeMax ) from creditRequest.getPerson();

    then
        creditRequest.addIssue(Constants.PERSON_OLD);
end

rule "person whose age is less or equal than breakpoint age"
    salience 100
    when
        creditRequest : CreditRequest();
        engineParameters: EngineParameters();

        personAgeBreakpoint: Double () from engineParameters.getParameter(Constants.PERSON_AGE_BREAKPOINT);
        propertyTimeToPayBreakpointBefore: Double () from engineParameters.getParameter(Constants.PROPERTY_TIME_TO_PAY_BREAKPOINT_BEFORE);

        person : Person ( age <= personAgeBreakpoint ) from creditRequest.getPerson();
        personAffordablePayment : Double () from person.getAmountPerMonth();

        property : Property (price > personAffordablePayment * Constants.MONTHS * propertyTimeToPayBreakpointBefore ) from creditRequest.getProperty();

    then
        creditRequest.addIssue(Constants.PROPERTY_EXPENSIVE);
end

rule "person whose age is more than breakpoint age"
    salience 100
    when
        creditRequest : CreditRequest();
        engineParameters: EngineParameters();

        personAgeBreakpoint: Double () from engineParameters.getParameter(Constants.PERSON_AGE_BREAKPOINT);
        propertyTimeToPayBreakpointAfter: Double () from engineParameters.getParameter(Constants.PROPERTY_TIME_TO_PAY_BREAKPOINT_AFTER);

        person : Person ( age > personAgeBreakpoint ) from creditRequest.getPerson();
        personAffordablePayment : Double () from person.getAmountPerMonth();

        property : Property (price > personAffordablePayment * Constants.MONTHS * propertyTimeToPayBreakpointAfter ) from creditRequest.getProperty();

    then
        creditRequest.addIssue(Constants.PROPERTY_EXPENSIVE);
end
